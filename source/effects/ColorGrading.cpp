#include "ColorGrading.h"

#include <cstdint>
#include <utility>

#include <wrl/client.h>
#include "../wil/resource.h"

using namespace Microsoft::WRL;

void Effects::ColorGrading::AnnotatePixelShader(ID3D11PixelShader* shader, const void* bytecode, SIZE_T length)
{
	// TODO: Factorize when we need more resources annotated
	static constexpr uint32_t BLOOM_MERGER_SHADER_HASH[4] = { 0xf3896ba8, 0x4f0671da, 0xa690e62a, 0xc9168288 };

	if ( length >= 4 + sizeof(BLOOM_MERGER_SHADER_HASH) )
	{
		if ( memcmp( reinterpret_cast<const uint8_t*>(bytecode) + 4, BLOOM_MERGER_SHADER_HASH, sizeof(BLOOM_MERGER_SHADER_HASH) ) == 0 )
		{
			ResourceMetadata resource;
			resource.m_type = ResourceMetadata::Type::BloomMergerShader;
			shader->SetPrivateData( __uuidof(resource), sizeof(resource), &resource );
		}
	}
}

void Effects::ColorGrading::OnPixelShaderSet(ID3D11PixelShader* shader)
{
	ResourceMetadata meta;
	UINT size = sizeof(meta);
	if ( SUCCEEDED(shader->GetPrivateData(__uuidof(meta), &size, &meta)) )
	{
		if ( meta.m_type == ResourceMetadata::Type::BloomMergerShader )
		{
			m_state = State::MergerCallFound;
		}
	}
}

// TODO: Unfuck this
ComPtr<ID3D11VertexShader> vertexShader;
ComPtr<ID3D11InputLayout> inputLayout;
ComPtr<ID3D11RasterizerState> rasterizerState;
ComPtr<ID3D11BlendState> blendState;

ComPtr<ID3D11Buffer> colorGradingVB;
ComPtr<ID3D11PixelShader> colorGradingPS;
ComPtr<ID3D11Buffer> colorGradingCB;

void Effects::ColorGrading::BeforeDraw( ID3D11DeviceContext* context )
{
	if ( m_state == State::MergerCallFound )
	{
		m_state = State::ResourcesGathered;

		context->VSGetShader( vertexShader.ReleaseAndGetAddressOf(), nullptr, nullptr );
		context->IAGetInputLayout( inputLayout.ReleaseAndGetAddressOf() );
		context->RSGetState( rasterizerState.ReleaseAndGetAddressOf() );
		context->OMGetBlendState( blendState.ReleaseAndGetAddressOf(), nullptr, nullptr );

		// TODO: Cache, obviously
		/* E:\CookiePLMonster.github.io\scratch\dxhr-article\dxhr-color-grading.dxbc (12.04.2020 15:50:58)
		   StartOffset: 00000000, EndOffset: 000010A7, D³ugoœæ: 000010A8 */

		unsigned char colorGradingDXBC[4264] = {
			0x44, 0x58, 0x42, 0x43, 0x60, 0x0B, 0x5D, 0xB3, 0xE2, 0x96, 0x47, 0x5A,
			0x5E, 0x79, 0xED, 0x58, 0x43, 0xFE, 0x65, 0x63, 0x01, 0x00, 0x00, 0x00,
			0xA8, 0x10, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
			0x2C, 0x0B, 0x00, 0x00, 0x60, 0x0B, 0x00, 0x00, 0x94, 0x0B, 0x00, 0x00,
			0x0C, 0x10, 0x00, 0x00, 0x52, 0x44, 0x45, 0x46, 0xF0, 0x0A, 0x00, 0x00,
			0x03, 0x00, 0x00, 0x00, 0x6C, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
			0x3C, 0x00, 0x00, 0x00, 0x00, 0x05, 0xFF, 0xFF, 0x08, 0x01, 0x00, 0x00,
			0xBC, 0x0A, 0x00, 0x00, 0x52, 0x44, 0x31, 0x31, 0x3C, 0x00, 0x00, 0x00,
			0x18, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
			0x24, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xDC, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0E, 0x01, 0x00, 0x00,
			0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
			0x4F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
			0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5B, 0x01, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
			0x01, 0x00, 0x00, 0x00, 0x70, 0x5F, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6C,
			0x74, 0x5F, 0x4D, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6C, 0x5F, 0x30,
			0x43, 0x32, 0x35, 0x41, 0x46, 0x36, 0x34, 0x31, 0x36, 0x30, 0x38, 0x38,
			0x37, 0x38, 0x31, 0x5F, 0x50, 0x61, 0x72, 0x61, 0x6D, 0x5F, 0x73, 0x61,
			0x6D, 0x70, 0x6C, 0x65, 0x72, 0x00, 0x70, 0x5F, 0x64, 0x65, 0x66, 0x61,
			0x75, 0x6C, 0x74, 0x5F, 0x4D, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6C,
			0x5F, 0x30, 0x43, 0x32, 0x35, 0x41, 0x46, 0x36, 0x34, 0x31, 0x36, 0x30,
			0x38, 0x38, 0x37, 0x38, 0x31, 0x5F, 0x50, 0x61, 0x72, 0x61, 0x6D, 0x5F,
			0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x44, 0x72, 0x61, 0x77,
			0x61, 0x62, 0x6C, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x00, 0x53,
			0x63, 0x65, 0x6E, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x00, 0x49,
			0x6E, 0x73, 0x74, 0x61, 0x6E, 0x63, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65,
			0x72, 0x00, 0xAB, 0xAB, 0x40, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
			0xB4, 0x01, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x4F, 0x01, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00,
			0xE0, 0x02, 0x00, 0x00, 0x90, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x5B, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
			0x60, 0x0A, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x54, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x88, 0x02, 0x00, 0x00,
			0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x64, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0x93, 0x02, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
			0x02, 0x00, 0x00, 0x00, 0xAC, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x00, 0x00, 0xD0, 0x02, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
			0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAC, 0x02, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x46, 0x6F, 0x67, 0x43,
			0x6F, 0x6C, 0x6F, 0x72, 0x00, 0x66, 0x6C, 0x6F, 0x61, 0x74, 0x34, 0x00,
			0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5D, 0x02, 0x00, 0x00,
			0x44, 0x65, 0x62, 0x75, 0x67, 0x43, 0x6F, 0x6C, 0x6F, 0x72, 0x00, 0x4D,
			0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6C, 0x4F, 0x70, 0x61, 0x63, 0x69,
			0x74, 0x79, 0x00, 0x66, 0x6C, 0x6F, 0x61, 0x74, 0x00, 0xAB, 0xAB, 0xAB,
			0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA3, 0x02, 0x00, 0x00,
			0x41, 0x6C, 0x70, 0x68, 0x61, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6F,
			0x6C, 0x64, 0x00, 0xAB, 0xB8, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x07, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xEC, 0x07, 0x00, 0x00,
			0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xC8, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0xF9, 0x07, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x00, 0x00, 0x38, 0x08, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00,
			0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x47, 0x08, 0x00, 0x00,
			0xA0, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0x84, 0x08, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x00, 0x00, 0x94, 0x08, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00,
			0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x08, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xA1, 0x08, 0x00, 0x00,
			0xD0, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x14, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0xB1, 0x08, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x00, 0x00, 0xC2, 0x08, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00,
			0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD8, 0x08, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x08, 0x00, 0x00,
			0x20, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x64, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0x08, 0x09, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x00, 0x00, 0x1B, 0x09, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00,
			0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x24, 0x09, 0x00, 0x00,
			0x50, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x64, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0x2E, 0x09, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x00, 0x00, 0x47, 0x09, 0x00, 0x00, 0x70, 0x01, 0x00, 0x00,
			0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00,
			0x80, 0x01, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x14, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0x6B, 0x09, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x00, 0x00, 0x7B, 0x09, 0x00, 0x00, 0xA0, 0x01, 0x00, 0x00,
			0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x08, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x89, 0x09, 0x00, 0x00,
			0xB0, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x98, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0xBC, 0x09, 0x00, 0x00, 0xB0, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xAC, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x00, 0x00, 0xCA, 0x09, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00,
			0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xD8, 0x09, 0x00, 0x00,
			0xD0, 0x02, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x14, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0xE9, 0x09, 0x00, 0x00, 0xE0, 0x02, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x00, 0x00, 0xF7, 0x09, 0x00, 0x00, 0xF0, 0x02, 0x00, 0x00,
			0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0A, 0x00, 0x00,
			0x00, 0x03, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x64, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0x15, 0x0A, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x00, 0x00, 0x25, 0x0A, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00,
			0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x33, 0x0A, 0x00, 0x00,
			0x30, 0x03, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x64, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0x43, 0x0A, 0x00, 0x00, 0x40, 0x03, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x00, 0x00, 0x51, 0x0A, 0x00, 0x00, 0x50, 0x03, 0x00, 0x00,
			0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x07, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x56, 0x69, 0x65, 0x77,
			0x00, 0x66, 0x6C, 0x6F, 0x61, 0x74, 0x34, 0x78, 0x34, 0x00, 0xAB, 0xAB,
			0x02, 0x00, 0x03, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBD, 0x07, 0x00, 0x00,
			0x53, 0x63, 0x72, 0x65, 0x65, 0x6E, 0x4D, 0x61, 0x74, 0x72, 0x69, 0x78,
			0x00, 0x44, 0x65, 0x70, 0x74, 0x68, 0x45, 0x78, 0x70, 0x6F, 0x72, 0x74,
			0x53, 0x63, 0x61, 0x6C, 0x65, 0x00, 0x66, 0x6C, 0x6F, 0x61, 0x74, 0x32,
			0x00, 0xAB, 0xAB, 0xAB, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x02, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x0A, 0x08, 0x00, 0x00, 0x46, 0x6F, 0x67, 0x53, 0x63, 0x61, 0x6C, 0x65,
			0x4F, 0x66, 0x66, 0x73, 0x65, 0x74, 0x00, 0x43, 0x61, 0x6D, 0x65, 0x72,
			0x61, 0x50, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x66, 0x6C,
			0x6F, 0x61, 0x74, 0x33, 0x00, 0xAB, 0xAB, 0xAB, 0x01, 0x00, 0x03, 0x00,
			0x01, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x56, 0x08, 0x00, 0x00, 0x43, 0x61, 0x6D, 0x65,
			0x72, 0x61, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x00,
			0x44, 0x65, 0x70, 0x74, 0x68, 0x46, 0x61, 0x63, 0x74, 0x6F, 0x72, 0x73,
			0x00, 0x53, 0x68, 0x61, 0x64, 0x6F, 0x77, 0x44, 0x65, 0x70, 0x74, 0x68,
			0x42, 0x69, 0x61, 0x73, 0x00, 0x53, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6D,
			0x65, 0x56, 0x69, 0x65, 0x77, 0x70, 0x6F, 0x72, 0x74, 0x00, 0x44, 0x65,
			0x70, 0x74, 0x68, 0x54, 0x6F, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x00, 0x66,
			0x6C, 0x6F, 0x61, 0x74, 0x33, 0x78, 0x34, 0x00, 0x02, 0x00, 0x03, 0x00,
			0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xCF, 0x08, 0x00, 0x00, 0x44, 0x65, 0x70, 0x74,
			0x68, 0x54, 0x6F, 0x56, 0x69, 0x65, 0x77, 0x00, 0x4F, 0x6E, 0x65, 0x4F,
			0x76, 0x65, 0x72, 0x44, 0x65, 0x70, 0x74, 0x68, 0x54, 0x6F, 0x56, 0x69,
			0x65, 0x77, 0x00, 0x44, 0x65, 0x70, 0x74, 0x68, 0x54, 0x6F, 0x57, 0x00,
			0x43, 0x6C, 0x69, 0x70, 0x50, 0x6C, 0x61, 0x6E, 0x65, 0x00, 0x56, 0x69,
			0x65, 0x77, 0x70, 0x6F, 0x72, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x53,
			0x63, 0x61, 0x6C, 0x65, 0x4F, 0x66, 0x66, 0x73, 0x65, 0x74, 0x00, 0x43,
			0x6F, 0x6C, 0x6F, 0x72, 0x44, 0x4F, 0x46, 0x44, 0x65, 0x70, 0x74, 0x68,
			0x53, 0x63, 0x61, 0x6C, 0x65, 0x4F, 0x66, 0x66, 0x73, 0x65, 0x74, 0x00,
			0x54, 0x69, 0x6D, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x00, 0x48,
			0x65, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6F, 0x67, 0x50, 0x61, 0x72, 0x61,
			0x6D, 0x73, 0x00, 0x47, 0x6C, 0x6F, 0x62, 0x61, 0x6C, 0x41, 0x6D, 0x62,
			0x69, 0x65, 0x6E, 0x74, 0x00, 0x47, 0x6C, 0x6F, 0x62, 0x61, 0x6C, 0x50,
			0x61, 0x72, 0x61, 0x6D, 0x73, 0x00, 0xAB, 0xAB, 0x01, 0x00, 0x03, 0x00,
			0x01, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x5D, 0x02, 0x00, 0x00, 0x44, 0x58, 0x33, 0x5F,
			0x53, 0x53, 0x41, 0x4F, 0x53, 0x63, 0x61, 0x6C, 0x65, 0x00, 0x53, 0x63,
			0x72, 0x65, 0x65, 0x6E, 0x45, 0x78, 0x74, 0x65, 0x6E, 0x74, 0x73, 0x00,
			0x53, 0x63, 0x72, 0x65, 0x65, 0x6E, 0x52, 0x65, 0x73, 0x6F, 0x6C, 0x75,
			0x74, 0x69, 0x6F, 0x6E, 0x00, 0x50, 0x53, 0x53, 0x4D, 0x54, 0x6F, 0x4D,
			0x61, 0x70, 0x31, 0x4C, 0x69, 0x6E, 0x00, 0x50, 0x53, 0x53, 0x4D, 0x54,
			0x6F, 0x4D, 0x61, 0x70, 0x31, 0x43, 0x6F, 0x6E, 0x73, 0x74, 0x00, 0x50,
			0x53, 0x53, 0x4D, 0x54, 0x6F, 0x4D, 0x61, 0x70, 0x32, 0x4C, 0x69, 0x6E,
			0x00, 0x50, 0x53, 0x53, 0x4D, 0x54, 0x6F, 0x4D, 0x61, 0x70, 0x32, 0x43,
			0x6F, 0x6E, 0x73, 0x74, 0x00, 0x50, 0x53, 0x53, 0x4D, 0x54, 0x6F, 0x4D,
			0x61, 0x70, 0x33, 0x4C, 0x69, 0x6E, 0x00, 0x50, 0x53, 0x53, 0x4D, 0x54,
			0x6F, 0x4D, 0x61, 0x70, 0x33, 0x43, 0x6F, 0x6E, 0x73, 0x74, 0x00, 0x50,
			0x53, 0x53, 0x4D, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6E, 0x63, 0x65, 0x73,
			0x00, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x54, 0x6F, 0x50, 0x53, 0x53, 0x4D,
			0x30, 0x00, 0xAB, 0xAB, 0x88, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x80, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x98, 0x0A, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x49, 0x6E, 0x73, 0x74,
			0x61, 0x6E, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6D, 0x73, 0x00, 0xAB,
			0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5D, 0x02, 0x00, 0x00,
			0x4D, 0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x20, 0x28, 0x52,
			0x29, 0x20, 0x48, 0x4C, 0x53, 0x4C, 0x20, 0x53, 0x68, 0x61, 0x64, 0x65,
			0x72, 0x20, 0x43, 0x6F, 0x6D, 0x70, 0x69, 0x6C, 0x65, 0x72, 0x20, 0x39,
			0x2E, 0x32, 0x36, 0x2E, 0x39, 0x35, 0x32, 0x2E, 0x32, 0x38, 0x34, 0x34,
			0x00, 0xAB, 0xAB, 0xAB, 0x49, 0x53, 0x47, 0x4E, 0x2C, 0x00, 0x00, 0x00,
			0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x0F, 0x03, 0x00, 0x00, 0x53, 0x56, 0x5F, 0x50,
			0x4F, 0x53, 0x49, 0x54, 0x49, 0x4F, 0x4E, 0x00, 0x4F, 0x53, 0x47, 0x4E,
			0x2C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
			0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,
			0x53, 0x56, 0x5F, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x00, 0xAB, 0xAB,
			0x53, 0x48, 0x45, 0x58, 0x70, 0x04, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
			0x1C, 0x01, 0x00, 0x00, 0x6A, 0x08, 0x00, 0x01, 0x59, 0x00, 0x00, 0x04,
			0x46, 0x8E, 0x20, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
			0x59, 0x00, 0x00, 0x04, 0x46, 0x8E, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00,
			0x2D, 0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x04, 0x46, 0x8E, 0x20, 0x00,
			0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x03,
			0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x18, 0x00, 0x04,
			0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00,
			0x64, 0x20, 0x00, 0x04, 0x32, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0xF2, 0x20, 0x10, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00,
			0x32, 0x00, 0x00, 0x0B, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x46, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE6, 0x8A, 0x20, 0x00,
			0x02, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x46, 0x80, 0x20, 0x00,
			0x02, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x8B,
			0xC2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00,
			0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x46, 0x7E, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0F, 0x32, 0x00, 0x10, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00,
			0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x08, 0x32, 0x00, 0x10, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xE6, 0x8A, 0x20, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
			0x0F, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x2F, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x38, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x0A, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x80, 0x20, 0x00,
			0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05,
			0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x10, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x32, 0x00, 0x00, 0x0B,
			0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x10, 0x80,
			0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x80, 0x20, 0x00,
			0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00,
			0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00,
			0x0A, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
			0x22, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x10, 0x00,
			0x01, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x32, 0x00, 0x00, 0x0D, 0x72, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00,
			0x56, 0x05, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x02, 0x40, 0x00, 0x00, 0xAB, 0xAA, 0xAA, 0x3E, 0xAB, 0xAA, 0xAA, 0x3E,
			0xAB, 0xAA, 0xAA, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00,
			0x01, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x01, 0x40, 0x00, 0x00, 0xAB, 0xAA, 0xAA, 0x3E, 0x32, 0x00, 0x00, 0x0A,
			0x72, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 0x85, 0x20, 0x00,
			0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00,
			0x01, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x38, 0x20, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x1A, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x80, 0x20, 0x00,
			0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0A,
			0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x10, 0x80,
			0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x40, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F,
			0x32, 0x00, 0x00, 0x09, 0x22, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x1A, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x40, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0xBF,
			0x34, 0x00, 0x00, 0x07, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x2A, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x82, 0x00, 0x10, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x10, 0x80, 0xC1, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F,
			0x34, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x1A, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00,
			0x02, 0x00, 0x00, 0x00, 0xF6, 0x0F, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x46, 0x82, 0x20, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
			0x32, 0x00, 0x00, 0x0A, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00,
			0x46, 0x82, 0x20, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
			0xA6, 0x0A, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00,
			0x02, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0A, 0xE2, 0x00, 0x10, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x06, 0x89, 0x20, 0x00, 0x05, 0x00, 0x00, 0x00,
			0x03, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x06, 0x09, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07,
			0xE2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x09, 0x10, 0x00,
			0x01, 0x00, 0x00, 0x00, 0x56, 0x0E, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x32, 0x00, 0x00, 0x0D, 0xE2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x56, 0x0E, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40,
			0x00, 0x00, 0x00, 0x40, 0x06, 0x09, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00,
			0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0A, 0xE2, 0x00, 0x10, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x06, 0x80, 0x20, 0x00, 0x05, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x56, 0x0E, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x06, 0x09, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07,
			0x72, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x96, 0x07, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x36, 0x00, 0x00, 0x06, 0x82, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x0A, 0x80, 0x20, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
			0x3E, 0x00, 0x00, 0x01, 0x53, 0x54, 0x41, 0x54, 0x94, 0x00, 0x00, 0x00,
			0x1E, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00
		};
		m_device->CreatePixelShader( colorGradingDXBC, sizeof(colorGradingDXBC), nullptr, colorGradingPS.ReleaseAndGetAddressOf() );


		{
			D3D11_BUFFER_DESC cbDesc {};
			cbDesc.ByteWidth = 128;
			cbDesc.Usage = D3D11_USAGE_IMMUTABLE;
			cbDesc.BindFlags = D3D11_BIND_CONSTANT_BUFFER;

			static const float colorCorrection[32] = {
				0.85,  0.75,  1.25,  0.00,
				0.25098,  0.31373,  0.28235,  1.00,
				0.60392,  0.52627,  0.4098,  1.10,
				0.52941,  0.52941,  0.52941,  1.00,
				1.00,  0.00,  0.70,  0.70,
			};

			D3D11_SUBRESOURCE_DATA initialData {};
			initialData.pSysMem = colorCorrection;
			m_device->CreateBuffer( &cbDesc, &initialData, colorGradingCB.ReleaseAndGetAddressOf() );
		}

		{
			static const float vertexBuffer[6][3] = {
				{ 0.00,  0.00,  50.00 },
				{ 1.00,  0.00,  50.00 },
				{ 0.00,  1.00,  50.00 },
				{ 1.00,  0.00,  50.00 },
				{ 1.00,  1.00,  50.00 },
				{ 0.00,  1.00,  50.00 },
			};

			D3D11_BUFFER_DESC vbDesc {};
			vbDesc.ByteWidth = sizeof(vertexBuffer);
			vbDesc.Usage = D3D11_USAGE_IMMUTABLE;
			vbDesc.BindFlags = D3D11_BIND_VERTEX_BUFFER;

			D3D11_SUBRESOURCE_DATA initialData {};
			initialData.pSysMem = vertexBuffer;
			m_device->CreateBuffer( &vbDesc, &initialData, colorGradingVB.ReleaseAndGetAddressOf() );
		}
	}
}

void Effects::ColorGrading::BeforeDrawIndexed( ID3D11DeviceContext* context )
{
	
}

void Effects::ColorGrading::BeforeOMSetBlendState( ID3D11DeviceContext* context, ID3D11BlendState* pBlendState )
{
	if ( blendState != nullptr )
	{
		// If setting to a different blend state to what we saved, draw
		ComPtr<IUnknown> lhs, rhs;
		blendState.As(&lhs);
		pBlendState->QueryInterface(IID_PPV_ARGS(&rhs));
		if ( lhs != rhs )
		{
			blendState.Reset();

			if ( std::exchange(m_state, State::Initial) == State::ResourcesGathered )
			{
				// TODO: Cache those! Later on we'll be creating a render target to render color grading to
				// and it'll have to be cached

				ComPtr<ID3D11RenderTargetView> rtv;
				context->OMGetRenderTargets( 1, rtv.GetAddressOf(), nullptr );

				ComPtr<ID3D11Resource> rt;
				rtv->GetResource( rt.GetAddressOf() );

				ComPtr<ID3D11Texture2D> rtex2d;
				rt.As(&rtex2d);

				D3D11_TEXTURE2D_DESC desc;
				rtex2d->GetDesc( &desc );

				ComPtr<ID3D11Texture2D> newRt;
				m_device->CreateTexture2D( &desc, nullptr, newRt.GetAddressOf() );

				ComPtr<ID3D11RenderTargetView> newRtv;
				m_device->CreateRenderTargetView( newRt.Get(), nullptr, newRtv.GetAddressOf() );

		
				ComPtr<ID3D11ShaderResourceView> srv;
				m_device->CreateShaderResourceView( rt.Get(), nullptr, srv.GetAddressOf() );

				// Now set up the color grading call - we save and restore states wherever possible
				ComPtr<ID3D11VertexShader> savedVertexShader; // TODO: Should factorize those into functions
				ComPtr<ID3D11PixelShader> savedPixelShader;
				ComPtr<ID3D11InputLayout> savedInputLayout;
				ComPtr<ID3D11RasterizerState> savedRasterizerState;
				ComPtr<ID3D11RenderTargetView> savedRTV;
				ComPtr<ID3D11ShaderResourceView> savedSRV;

				ComPtr<ID3D11Buffer> savedInputBuffer;
				UINT Stride;
				UINT Offset;

				ComPtr<ID3D11Buffer> savedConstantBuffer;

				context->VSGetShader( savedVertexShader.GetAddressOf(), nullptr, nullptr );
				context->PSGetShader( savedPixelShader.GetAddressOf(), nullptr, nullptr );
				context->IAGetInputLayout( savedInputLayout.GetAddressOf() );
				context->RSGetState( savedRasterizerState.GetAddressOf() );
				context->OMGetRenderTargets( 1, savedRTV.GetAddressOf(), nullptr );
				context->PSGetShaderResources( 0, 1, savedSRV.GetAddressOf() );
				context->IAGetVertexBuffers( 0, 1, savedInputBuffer.ReleaseAndGetAddressOf(), &Stride, &Offset );
				context->PSGetConstantBuffers( 5, 1, savedConstantBuffer.ReleaseAndGetAddressOf() );

				auto restore = wil::scope_exit([&] {
					context->VSSetShader( savedVertexShader.Get(), nullptr, 0 );
					context->PSSetShader( savedPixelShader.Get(), nullptr, 0 );
					context->IASetInputLayout( savedInputLayout.Get() );
					context->RSSetState( savedRasterizerState.Get() );
					context->OMSetRenderTargets( 1, savedRTV.GetAddressOf(), nullptr );
					context->IASetVertexBuffers( 0, 1, savedInputBuffer.GetAddressOf(), &Stride, &Offset );
					context->PSSetConstantBuffers( 5, 1, savedConstantBuffer.GetAddressOf() );
					context->PSSetShaderResources( 0, 1, savedSRV.GetAddressOf() );
				});

				context->VSSetShader( vertexShader.Get(), nullptr, 0 );
				context->PSSetShader( colorGradingPS.Get(), nullptr, 0 );
				context->IASetInputLayout( inputLayout.Get() );
				context->RSSetState( rasterizerState.Get() );

				context->OMSetRenderTargets( 1, newRtv.GetAddressOf(), nullptr );

				UINT newStrides[1] = { 12 };
				UINT newOffsets[1] = { 0 };
				context->IASetVertexBuffers( 0, 1, colorGradingVB.GetAddressOf(), newStrides, newOffsets );
				context->PSSetConstantBuffers( 5, 1, colorGradingCB.GetAddressOf() );
				context->PSSetShaderResources( 0, 1, srv.GetAddressOf() );
		
				// Draw color grading
				context->Draw( 6, 0 );

				context->CopyResource( rt.Get(), newRt.Get() );
			}
		}
	}
}
